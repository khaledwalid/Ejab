@model Ejab.BAL.ModelViews.AboutUs.AboutUsViewModel

@{
    ViewBag.Title = "EditAboutUs";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}
<link href="~/Content/css/GoogleMap.css" rel="stylesheet" />
<div id="page-wrapper" class="gray-bg dashbard-1">

    <div class="row wrapper border-bottom white-bg page-heading">
        <h2>@Resources.Global.ContactUs </h2>
        <ol class="breadcrumb">
            <li>
                <a href="/Chart/Index/">@Resources.Global.Home </a>
            </li>
            <li>
                @Resources.Global.ContactUs
            </li>
        </ol>
    </div>

    <div class="row">
        <div class="col-lg-12">
            <div class="wrapper wrapper-content loginss ">
                <div class="row">
                    <div class="col-lg-12">
                        <div class="ibox float-e-margins">
                            <div class="ibox-title">
                                <h5> @Resources.Global.AddContactUs </h5>

                            </div>
                            <div class="form-group col-sm-12">
                                <input id="pac-input" class="form-control " type="text" placeholder="Search For Address On Google map" onblur="myFunction();">
                            </div>
                            <div class="form-group">

                                @*<iframe width="100%" height="450" frameborder="0" style="border: 0" allowfullscreen>*@
                                <div id="map" style="width: 100%; height: 456px; border: 0">
                                    my google map
                                </div>
                                @*</iframe>*@

                            </div>
                            <div class="ibox-content">
                                @using (Html.BeginForm("EditAboutUs", "AboutUs", FormMethod.Post, new { @class = "form-horizontal" }))
                                {
                                    @Html.AntiForgeryToken()
                                    @Html.ValidationSummary(true)
                                    <div class="form-group">
                                        <label class="col-sm-2 control-label">@Resources.Global.Address</label>
                                        <div class="col-sm-10">
                                            <div class="input-group m-b">
                                                @Html.TextBoxFor(x => x.Address, new { @class = "form-control", id = "txtaddress" })

                                                <span class="input-group-addon">200</span>

                                            </div>
                                            @Html.ValidationMessageFor(x => x.Address)
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        <label class="col-sm-2 control-label">@Resources.Global.Region </label>
                                        <div class="col-sm-10">
                                            <div class="input-group m-b">
                                                @Html.TextBoxFor(x => x.Region, new { @class = "form-control", id = "txtregion" })

                                                <span class="input-group-addon">50</span>
                                            </div>
                                            @Html.ValidationMessageFor(x => x.Region)
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        <label class="col-sm-2 control-label">@Resources.Global.Phone  </label>
                                        <div class="col-sm-10">
                                            <div class="input-group m-b">
                                                @Html.TextBoxFor(x => x.phone, new { @class = "form-control", id = "txtregion", onkeypress = "return isNumberKey(event)" })

                                                <span class="input-group-addon">50</span>
                                            </div>
                                            @Html.ValidationMessageFor(x => x.phone)
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="col-sm-2 control-label">@Resources.Global.Email   </label>
                                        <div class="col-sm-10">
                                            <div class="input-group m-b">
                                                @Html.TextBoxFor(x => x.Email, new { @class = "form-control", id = "txtregion" })

                                                <span class="input-group-addon">50</span>
                                            </div>
                                            @Html.ValidationMessageFor(x => x.Email)
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="col-sm-2 control-label">@Resources.Global.AddressLongitude   </label>
                                        <div class="col-sm-10">
                                            <div class="input-group m-b">
                                                @Html.TextBoxFor(x => x.Longitude, new { @class = "form-control", id = "txtlong", style = "border: 0px;", @readonly = "readonly" })

                                                <span class="input-group-addon">50</span>
                                            </div>
                                            @Html.ValidationMessageFor(x => x.Longitude)
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label class="col-sm-2 control-label">@Resources.Global.AdressLatitude   </label>
                                        <div class="col-sm-10">
                                            <div class="input-group m-b">
                                                @Html.TextBoxFor(x => x.latitude, new { @class = "form-control read", id = "txtlat", style = "border: 0px;", @readonly = "readonly" })
                                                <span class="input-group-addon">50</span>
                                            </div>
                                            @Html.ValidationMessageFor(x => x.latitude)
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        <div class="col-lg-offset-2 col-lg-10">
                                            <button class="btn btn-primary buttt" type="submit" id="btnSave">@Resources.Global.Edit </button>
                                            @Html.ActionLink(@Resources.Global.Back, "Index", "AboutUs", new { @class = "btn btn - default  buttt" })
                                        </div>
                                    </div>


                                }


                            </div>
                        </div>


                    </div>
                </div>
            </div>
        </div>
    </div>
    @Html.Partial("~/Views/Shared/_Footer.cshtml")
</div>




@*<script src="https://maps.googleapis.com/maps/api/js?v=3.exp&signed_in=true&libraries=places"></script>*@
<script async defer
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBVpB61Tp2RtLMojG93kzgC9MyX4wLm_8o&callback=initialize">
</script>


<script>
    debugger;
    function isNumberKey(evt) {
        var charCode = (evt.which) ? evt.which : event.keyCode
        if (charCode > 31 && (charCode < 48 || charCode > 57))
            return false;

        return true;
    }

    function initMap() {
        var map = new google.maps.Map(document.getElementById('map'), {
            center: { lat: @Model.latitude , lng: @Model.Longitude  },
            zoom: 13
        });


        var input = document.getElementById('pac-input');

        var autocomplete = new google.maps.places.Autocomplete(input);
        autocomplete.bindTo('bounds', map);

        map.controls[google.maps.ControlPosition.TOP_CENTER].push(input);
        var geocoder = new google.maps.Geocoder;
        var infowindow = new google.maps.InfoWindow();
        var infowindowContent = document.getElementById('pac-input');
        infowindow.setContent(infowindowContent);
        var marker = new google.maps.Marker({
            map: map,
            position:{ lat: @Model.latitude , lng: @Model.Longitude  },
            draggable:true
        });
        marker.addListener('click', function () {
            infowindow.open(map, marker);
        });

        function placeMarker(location) {

            var marker = new google.maps.Marker({
                position: location,
                map: map
            });
        }
        function changeMarkerPosition(marker) {
            var latlng = new google.maps.LatLng(-24.397, 140.644);
            marker.setPosition(latlng);
        }

        google.maps.event.addListener(marker, 'dragstart', function() {
            var lat = event.latLng.lat();
            var lng = event.latLng.lng();
            var lattext=document.getElementById('txtlat');
            var longtext=document.getElementById('txtlong');
            lattext.value=lat;
            longtext.value = lng;

        });

        google.maps.event.addListener(marker, 'dragend', function(event) {
             var lat = event.latLng.lat();
            var lng = event.latLng.lng();
            var lattext=document.getElementById('txtlat');
            var longtext=document.getElementById('txtlong');
            lattext.value=lat;
            longtext.value = lng;
            geocodeLatLng(geocoder, map, infowindow);
            geocoder.geocode({
                'latLng': event.latLng
              },               
           function (results, status) {
              if (status == google.maps.GeocoderStatus.OK) {
        
                        if (results[1]) {
                            var indice = 0;
                            for (var j = 0; j < results.length; j++) {
                                if (results[j].types[0] == 'locality') {
                                    indice = j;
                                    break;
                                }
                            }

                            console.log(results[j]);
                            for (var i = 0; i < results[j].address_components.length; i++) {
                                if (results[j].address_components[i].types[0] == "locality") {
                                    //this is the object you are looking for
                                    city = results[j].address_components[i];
                                }
                                if (results[j].address_components[i].types[0] == "administrative_area_level_1") {
                                    //this is the object you are looking for
                                    region = results[j].address_components[i];
                                }
                                if (results[j].address_components[i].types[0] == "country") {
                                    //this is the object you are looking for
                                    country = results[j].address_components[i];
                                }
                                if (results[j].address_components[i].types[0] == "street_address") {
                                    //this is the object you are looking for
                                    street = results[j].address_components[i];
                                }
                                var address = document.getElementById('txtaddress');
                                address.value = results[1].formatted_address;


                            }

                            var region = document.getElementById('txtregion');
                            region.value = city.long_name;

                        } else {
                            alert("No results found");
                        }
                        //}
                    } else {
                        alert("Geocoder failed due to: " + status);
                    }
                });



        });

        autocomplete.addListener('place_changed', function () {
            infowindow.close();
            var place = autocomplete.getPlace();


            if (!place.geometry) {
                return;
            }

            if (place.geometry.viewport) {
                map.fitBounds(place.geometry.viewport);
            } else {
                map.setCenter(place.geometry.location);
                map.setZoom(17);
            }
            marker.setPosition({
                lat: place.geometry.location.lat(),
                lng: place.geometry.location.lng()
            });

            marker.setVisible(true);

        });
    }

    function geolocate() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function(position) {
                var geolocation = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };
                var circle = new google.maps.Circle({
                    center: geolocation,
                    radius: position.coords.accuracy
                });
                autocomplete.setBounds(circle.getBounds());
            });
        }
    }

    function myFunction() {
       // var search = document.getElementById('pac-input');
        var address = document.getElementById('txtaddress');
        address.value = search.value;
        //if ($('#txtaddress').val() != content) {
        //    $('#txtaddress').value = content;
        //    alert('Content has been changed');
        //}
    };
    var lattext = document.getElementById('txtlat');
    var longtext = document.getElementById('txtlong');
    var latlng = lattext.value + ',' + longtext;
    function geocodeLatLng(geocoder, map, infowindow) {

        var latlng = { lat: lattext.value, lng: longtext.value };
        geocoder.geocode({ 'location': latlng }, function (results, status) {
            if (status === 'OK') {
                if (results[0]) {
                    map.setZoom(11);
                    var marker = new google.maps.Marker({
                        position: latlng,
                        map: map
                    });
                    infowindow.setContent(results[0].formatted_address);
                    var address = document.getElementById('txtaddress');
                    address.value = results[0].formatted_address;

                    infowindow.open(map, marker);
                } else {
                    window.alert('No results found');
                }
            } else {
                window.alert('Geocoder failed due to: ' + status);
            }
        });
    }
</script>

<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBVpB61Tp2RtLMojG93kzgC9MyX4wLm_8o&libraries=places&callback=initMap"
        async defer></script>
